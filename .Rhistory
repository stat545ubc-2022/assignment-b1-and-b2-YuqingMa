if(!is.numeric(target))
stop("The last param must be numeric")  %>%
drop_na(target) %>%
dplyr::group_by(across(all_of(group))) %>%
dplyr::summarise(across(where(is.numeric),mean))
}
#Vector of a different type (if relevant)
#This time we check if there would be an error when we try to calculate the mean of strings
sample_tree
test_that("check non-numeric numbers", {
expect_error(cal_mean(sample_tree, "genus_name","std_street"),"The last param must be numeric")
})
cal_mean <- function(data,group,target){
data %>%
if(!is.numeric(target)) %>%
cal_mean <- function(data,group,target){
data %>%
if(!is.numeric(target))
stop("The last param must be numeric")  %>%
drop_na(target) %>%
dplyr::group_by(across(all_of(group))) %>%
dplyr::summarise(across(where(is.numeric),mean))
}
test_that("check non-numeric numbers", {
expect_error(cal_mean(sample_tree, "genus_name","std_street"),"The last param must be numeric")
})
# To started with, I randomly selected 20 samlples from the dataset to conveniently compute.
sample_tree = sample_n(vancouver_trees,20)
#Vector with no NA’s
res = cal_mean(sample_tree,"genus_name","diameter")
cal_mean <- function(data,group,target){
data %>%
if(!is.numeric(target)){
stop("The last param must be numeric") } %>%
drop_na(target) %>%
dplyr::group_by(across(all_of(group))) %>%
dplyr::summarise(across(where(is.numeric),mean))
}
# To started with, I randomly selected 20 samlples from the dataset to conveniently compute.
sample_tree = sample_n(vancouver_trees,20)
#Vector with no NA’s
res = cal_mean(sample_tree,"genus_name","diameter")
cal_mean <- function(data,group,target){
data %>%
if(is.numeric(target)){
drop_na(target) %>%
dplyr::group_by(across(all_of(group))) %>%
dplyr::summarise(across(where(is.numeric),mean))
}else{
stop("dfsffsd")
}
}
# for example: we would like to calculate the mean diameter for different tree species
cal_mean(vancouver_trees,"genus_name","diameter")
cal_mean <- function(data,group,target){
data %>%
stopifnot(is.numeric(target)) %>%
drop_na(target) %>%
dplyr::group_by(across(all_of(group))) %>%
dplyr::summarise(across(where(is.numeric),mean))
}else{
}
cal_mean <- function(data,group,target){
data %>%
stopifnot(is.numeric(target)) %>%
drop_na(target) %>%
dplyr::group_by(across(all_of(group))) %>%
dplyr::summarise(across(where(is.numeric),mean))
}
# for example: we would like to calculate the mean diameter for different tree species
cal_mean(vancouver_trees,"genus_name","diameter")
cal_mean <- function(data,group,target){
data %>%
drop_na(target) %>%
stopifnot(is.numeric(target)) %>%
dplyr::group_by(across(all_of(group))) %>%
dplyr::summarise(across(where(is.numeric),mean))
}
# for example: we would like to calculate the mean diameter for different tree species
cal_mean(vancouver_trees,"genus_name","diameter")
cal_mean <- function(data,group,target){
data %>%
drop_na(target) %>%
stopifnot(is.numeric(target)) %>%
dplyr::group_by(across(all_of(group))) %>%
dplyr::summarise(across(where(is.numeric),mean))
}
## Exercise 3: Include examples
```{r}
# for example: we would like to calculate the mean diameter for different tree species
cal_mean(vancouver_trees,"genus_name","diameter")
```
data %>%
drop_na(target) %>%
stopifnot(is.numeric(data$target)) %>%
dplyr::group_by(across(all_of(group))) %>%
dplyr::summarise(across(where(is.numeric),mean))
cal_mean <- function(data,group,target){
data %>%
drop_na(target) %>%
stopifnot(is.numeric(data$target)) %>%
dplyr::group_by(across(all_of(group))) %>%
dplyr::summarise(across(where(is.numeric),mean))
}
cal_mean <- function(data,group,target){
data %>%
drop_na(target) %>%
stopifnot(is.numeric(data$target)) %>%
dplyr::group_by(across(all_of(group))) %>%
dplyr::summarise(across(where(is.numeric),mean))
}
# for example: we would like to calculate the mean diameter for different tree species
cal_mean(vancouver_trees,"genus_name","diameter")
cal_mean <- function(data,group,target){
data %>%
drop_na(target) %>%
stopifnot(is.numeric(data$target)) %>%
data$target
dplyr::group_by(across(all_of(group))) %>%
dplyr::summarise(across(where(is.numeric),mean))
}
# for example: we would like to calculate the mean diameter for different tree species
cal_mean(vancouver_trees,"genus_name","diameter")
cal_mean <- function(data,group,target){
data %>%
drop_na(target) %>%
stopifnot(is.numeric(data$target)) %>%
dplyr::group_by(across(all_of(group))) %>%
dplyr::summarise(across(where(is.numeric),mean))
}
cal_mean <- function(data,group,target){
data %>%
drop_na(target) %>%
stopifnot(is.numeric(data[, target])) %>%
dplyr::group_by(across(all_of(group))) %>%
dplyr::summarise(across(where(is.numeric),mean))
}
# for example: we would like to calculate the mean diameter for different tree species
cal_mean(vancouver_trees,"genus_name","diameter")
# To started with, I randomly selected 20 samlples from the dataset to conveniently compute.
sample_tree = sample_n(vancouver_trees,20)
#Vector with no NA’s
res = cal_mean(sample_tree,"genus_name","diameter")
#Vector of a different type (if relevant)
#This time we check if there would be an error when we try to calculate the mean of strings
sample_tree
expected_res = data.frame(
genus  = c()
longitude = c()
#Vector of a different type (if relevant)
#This time we check if there would be an error when we try to calculate the mean of strings
sample_tree
expected_res = data.frame(
genus  = c(),
longitude = c()
)
test_that("check non-numeric numbers", {
expect_error(cal_mean(sample_tree, "genus_name","std_street"),"The last param must be numeric")
})
#Vector of a different type (if relevant)
#This time we check if there would be an error when we try to calculate the mean of strings
sample_tree
expected_res = data.frame(
genus  = c(),
longitude = c()
)
test_that("check non-numeric numbers", {
expect_equal(cal_mean(expected_res, "genus","longitude"),0)
})
sample_tree
expected_res = data.frame(
genus  = c(),
longitude = c()
)
#Vector of a different type (if relevant)
#This time we check if there would be an error when we try to calculate the mean of strings
sample_tree
expected_res = data.frame(
genus  = c(),
longitude = c()
)
test_that("check non-numeric numbers", {
expect_equal(cal_mean(expected_res, "genus","longitude"),0)
})
#Vector of a different type (if relevant)
#This time we check if there would be an error when we try to calculate the mean of strings
sample_tree
expected_res = data.frame(
genus  = c(),
longitude = c()
)
test_that("check non-numeric numbers", {
expect_error(cal_mean(expected_res, "genus","longitude"),"Can't subset columns that don't exist")
})
#Vector of a different type (if relevant)
#This time we check if there would be an error when we try to calculate the mean of strings
sample_tree
test_that("check non-numeric numbers", {
expect_error(cal_mean(sample_tree, "genus_name","std_street"))
})
# for example: we would like to calculate the mean diameter for different tree species
cal_mean(vancouver_trees,"genus_name","diameter")
cal_mean <- function(data,group,target){
data %>%
drop_na(target) %>%
dplyr::group_by(across(all_of(group))) %>%
dplyr::summarise(across(where(is.numeric),mean))
}
#Vector of a different type (if relevant)
#This time we check if there would be an error when we try to calculate the mean of strings
sample_tree
test_that("check non-numeric numbers", {
expect_error(cal_mean(sample_tree, "genus_name","std_street"))
})
cal_mean <- function(data,group,target){
data %>%
stopifnot(is.numeric(target)) %>%
drop_na(target) %>%
dplyr::group_by(across(all_of(group))) %>%
dplyr::summarise(across(where(is.numeric),mean))
}
# To started with, I randomly selected 20 samlples from the dataset to conveniently compute.
sample_tree = sample_n(vancouver_trees,20)
#Vector with no NA’s
res = cal_mean(sample_tree,"genus_name","diameter")
cal_mean <- function(data,group,target){
data %>%
stopifnot(is.numeric(data[,target])) %>%
drop_na(target) %>%
dplyr::group_by(across(all_of(group))) %>%
dplyr::summarise(across(where(is.numeric),mean))
}
# To started with, I randomly selected 20 samlples from the dataset to conveniently compute.
sample_tree = sample_n(vancouver_trees,20)
#Vector with no NA’s
res = cal_mean(sample_tree,"genus_name","diameter")
#Vector of a different type (if relevant)
#This time we check if there would be an error when we try to calculate the mean of strings
sample_tree
tests = data.frame(
x = c("gdf"),
col1 = numeric(0)
)
#Vector of a different type (if relevant)
#This time we check if there would be an error when we try to calculate the mean of strings
sample_tree
tests = data.frame(
x = numeric(0),
col1 = numeric(0)
)
test_that("check non-numeric numbers", {
expect_error(cal_mean(sample_tree, "xe","col1"))
})
#Vector of length 0, like numeric(0).
#This time we check if there would be an error when we try to calculate a vector of length 0
sample_tree
tests = data.frame(
x = numeric(0),
col1 = numeric(0)
)
test_that("check non-numeric numbers", {
expect_error(cal_mean(sample_tree, "xe","col1"))
})
library(datateachr)
library(tidyverse)
library(testthat)
library(dplyr)
library(digest)
cal_mean <- function(data,group,target){
data %>%
drop_na(target) %>%
dplyr::group_by(across(all_of(group))) %>%
dplyr::summarise(across(where(is.numeric),mean))
}
#' Calculate the mean value for different groups
#' @details the function is aimed to firstly group the data by a property and then calculate the mean values of the grouped data.
#' @param data is the data table we will focus on
#' @param group is the property that user would like to group by.
#' @param target is the target column that we want to calculate its mean value
#' @return the mean values of different groups
# for example: we would like to calculate the mean diameter for different tree species
cal_mean(vancouver_trees,"genus_name","diameter")
# To started with, I randomly selected 20 samlples from the dataset to conveniently compute.
sample_tree = sample_n(vancouver_trees,20)
#Vector with no NA’s
res = cal_mean(sample_tree,"genus_name","diameter")
expected_res = data.frame(
genus_name = c("ACER","AESCULUS","CRATAEGUS","FAGUS","LIQUIDAMBAR","MAGNOLIA","MALUS","PRUNUS","TILIA"),
diameter = c(4.75	,24.75,8.50,16.50,7.50,3.00,3.00,14.70,14.25)
)
real_res = data.frame(
genus_name =res$genus_name,
diameter=res$diameter)
test_that("calculate the average diameters of different genuses", {
expect_equal(real_res,expected_res)
})
#Vector with NA’s
#This time we calculate the mean longitudes for different genuses
#There are NA values in the longitudes
sample_tree
expected_res = data.frame(
genus = c("ACER","AESCULUS","CRATAEGUS","FAGUS","LIQUIDAMBAR","MAGNOLIA","MALUS","PRUNUS","TILIA"),
longitude = c(-123.1358, -123.1315, -123.0767, -123.1518, -123.0680, -123.0920,-123.1435, -123.1069, -123.0723)
)
res = cal_mean(sample_tree, "genus_name","longitude")
real_res = data.frame(
genus = res$genus_name,
longitude = round(res$longitude,4)
)
expected_res
real_res
test_that("calculate the average longitudes of different genuses", {
expect_equal(real_res,expected_res)
})
#Vector of length 0, like numeric(0).
#This time we check if there would be an error when we try to calculate a vector of length 0
sample_tree
tests = data.frame(
x = numeric(0),
col1 = numeric(0)
)
test_that("check non-numeric numbers", {
expect_error(cal_mean(sample_tree, "xe","col1"))
})
library(datateachr)
library(tidyverse)
library(testthat)
library(dplyr)
library(digest)
cal_mean <- function(data,group,target){
data %>%
dplyr::group_by(across(all_of(group))) %>%
dplyr::summarise(across(where(is.numeric),mean))
}
#' Calculate the mean value for different groups
#' @details the function is aimed to firstly group the data by a property and then calculate the mean values of the grouped data.
#' @param data is the data table we will focus on
#' @param group is the property that user would like to group by.
#' @param target is the target column that we want to calculate its mean value
#' @return the mean values of different groups
# for example: we would like to calculate the mean diameter for different tree species
cal_mean(vancouver_trees,"genus_name","diameter")
# To started with, I randomly selected 20 samlples from the dataset to conveniently compute.
sample_tree = sample_n(vancouver_trees,20)
#Vector with no NA’s
res = cal_mean(sample_tree,"genus_name","diameter")
expected_res = data.frame(
genus_name = c("ACER","AESCULUS","CRATAEGUS","FAGUS","LIQUIDAMBAR","MAGNOLIA","MALUS","PRUNUS","TILIA"),
diameter = c(4.75	,24.75,8.50,16.50,7.50,3.00,3.00,14.70,14.25)
)
real_res = data.frame(
genus_name =res$genus_name,
diameter=res$diameter)
test_that("calculate the average diameters of different genuses", {
expect_equal(real_res,expected_res)
})
#Vector with NA’s
#This time we calculate the mean longitudes for different genuses
#There are NA values in the longitudes
sample_tree
expected_res = data.frame(
genus = c("ACER","AESCULUS","CRATAEGUS","FAGUS","LIQUIDAMBAR","MAGNOLIA","MALUS","PRUNUS","TILIA"),
longitude = c(-123.1358, -123.1315, -123.0767, -123.1518, -123.0680, -123.0920,-123.1435, -123.1069, -123.0723)
)
res = cal_mean(sample_tree, "genus_name","longitude")
real_res = data.frame(
genus = res$genus_name,
longitude = round(res$longitude,4)
)
expected_res
real_res
test_that("calculate the average longitudes of different genuses", {
expect_equal(real_res,expected_res)
})
#Vector of length 0, like numeric(0).
#This time we check if there would be an error when we try to calculate a vector of length 0
sample_tree
tests = data.frame(
x = numeric(0),
col1 = numeric(0)
)
test_that("check non-numeric numbers", {
expect_error(cal_mean(sample_tree, "xe","col1"))
})
sample_tree = sample_n(vancouver_trees,20)
View(sample_tree)
View(sample_tree)
sample_tree = top_n(vancouver_trees,20)
sample_tree = top_n(vancouver_trees,20)
sample_tree
sample_tree = slice_head(vancouver_trees,20)
sample_tree = slice_head(vancouver_trees,1:20)
sample_tree = slice_head(vancouver_trees,n=20)
sample_tree
sample_tree = slice_head(vancouver_trees,n=20)
sample_tree
res = cal_mean(sample_tree,"genus_name","diameter")
res
View(res)
res$genus_name
res$diameter
# To started with, I randomly selected 20 samlples from the dataset to conveniently compute.
sample_tree = slice_head(vancouver_trees,n=20)
sample_tree
#Vector with no NA’s
res = cal_mean(sample_tree,"genus_name","diameter")
res$diameter
expected_res = data.frame(
genus_name = c("ACER","FRAXINUS", "HIBISCUS","PYRUS","STYRAX" ,"TILIA","ULMUS","ZELKOVA" ),
diameter = c(14.468750,13.166667 , 4.500000 , 5.000000 , 5.333333, 11.875000)
)
res$diameter
# To started with, I randomly selected 20 samlples from the dataset to conveniently compute.
sample_tree = slice_head(vancouver_trees,n=20)
sample_tree
#Vector with no NA’s
res = cal_mean(sample_tree,"genus_name","diameter")
res$diameter
expected_res = data.frame(
genus_name = c("ACER","FRAXINUS", "HIBISCUS","PYRUS","STYRAX" ,"TILIA","ULMUS","ZELKOVA" ),
diameter = c(14.468750,13.166667 , 4.500000 , 5.000000 , 5.333333, 11.875000,10.000000 10.000000)
# To started with, I randomly selected 20 samlples from the dataset to conveniently compute.
sample_tree = slice_head(vancouver_trees,n=20)
sample_tree
#Vector with no NA’s
res = cal_mean(sample_tree,"genus_name","diameter")
res$diameter
expected_res = data.frame(
genus_name = c("ACER","FRAXINUS", "HIBISCUS","PYRUS","STYRAX" ,"TILIA","ULMUS","ZELKOVA" ),
diameter = c(14.468750,13.166667 , 4.500000 , 5.000000 , 5.333333, 11.875000,10.000000,10.000000)
)
real_res = data.frame(
genus_name =res$genus_name,
diameter= round(res$diameter,6))
test_that("calculate the average diameters of different genuses", {
expect_equal(real_res,expected_res)
})
# To started with, I randomly selected 20 samlples from the dataset to conveniently compute.
sample_tree = slice_head(vancouver_trees,n=20)
sample_tree
#Vector with no NA’s
res = cal_mean(sample_tree,"genus_name","diameter")
res$diameter
expected_res = data.frame(
genus_name = c("ACER","FRAXINUS", "HIBISCUS","PYRUS","STYRAX" ,"TILIA","ULMUS","ZELKOVA" ),
diameter = c(14.468750,13.166667 , 4.500000 , 5.000000 , 5.333333, 11.875000,10.000000,10.000000)
)
real_res = data.frame(
genus_name =res$genus_name,
diameter= round(res$diameter,6))
test_that("calculate the average diameters of different genuses", {
expect_equal(real_res,expected_res)
})
res = cal_mean(sample_tree, "genus_name","longitude")
res
res$longitude
#Vector with NA’s
#This time we calculate the mean longitudes for different genuses
#There are NA values in the longitudes
expected_res = data.frame(
genus = c("ACER","AESCULUS","CRATAEGUS","FAGUS","LIQUIDAMBAR","MAGNOLIA","MALUS","PRUNUS","TILIA"),
longitude = c(-123.1017 ,-123.0872, -123.0932, -123.1196, -123.0874, -123.0887,-123.1161 ,-123.1147)
)
#Vector with NA’s
#This time we calculate the mean longitudes for different genuses
#There are NA values in the longitudes
expected_res = data.frame(
genus = c("ACER","FRAXINUS", "HIBISCUS","PYRUS","STYRAX" ,"TILIA","ULMUS","ZELKOVA"),
longitude = c(-123.1017 ,-123.0872, -123.0932, -123.1196, -123.0874, -123.0887,-123.1161 ,-123.1147)
)
res = cal_mean(sample_tree, "genus_name","longitude")
res$longitude
real_res = data.frame(
genus = res$genus_name,
longitude = round(res$longitude,4)
)
expected_res
real_res
test_that("calculate the average longitudes of different genuses", {
expect_equal(real_res,expected_res)
})
#Vector of length 0, like numeric(0).
#This time we check if there would be an error when we try to calculate a vector of length 0
sample_tree
tests = data.frame(
x = numeric(0),
col1 = numeric(0)
)
test_that("check non-numeric numbers", {
expect_error(cal_mean(sample_tree, "xe","col1"))
})
shiny::runApp('Geyser')
runApp('Geyser')
runApp('Geyser')
runApp('Geyser')
ui
runApp('Geyser')
shiny::runApp('Geyser')
runApp('Geyser')
runApp('Geyser')
runApp('Geyser')
runApp('Geyser')
runApp()
runApp('Geyser')
runApp('Geyser')
runApp('Geyser')
runApp('Geyser')
runApp('Geyser')
runApp('Geyser')
runApp('Geyser')
runApp('Geyser')
runApp('Geyser')
